// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  name        String
  role        String       @default("nutrilife_user")
  posts       Post[]
  profile     Profile?
  preferences Preference[]
  meals       Meal[]

  @@map("users")
}

model Profile {
  id     String @id @default(uuid())
  bio    String
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Post {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
  title       String
  description String?
  published   Boolean    @default(false)
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  image       String?
  categories  Category[]
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
}

model Preference {
  id     Int     @id @default(autoincrement())
  user   User    @relation(fields: [userId], references: [id])
  userId String
  type   String?
  value  String?
  // + campos para as preferências alimentares
}

model Meal {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  title       String?
  userId      String
  datetime    DateTime @default(now())
  description String?
  calories    Int?
  image       String?
  // + campos para as refeições realizadas
}

// enum Role {
//   nutrilife_user
//   nutrilife_owner
// }
